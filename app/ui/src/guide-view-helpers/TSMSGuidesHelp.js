/**
  For Automatic Scan in Search Engine Discovery
  */

import React from 'react';

export default function GuidesHelp(props){

  let viliop = props.viliop;
  let project = viliop.currentProject;


  return (
    <div className="container">
      <div className="row">
        <div className="col-md-12">
          <h3 className="helpTitle">Intro:</h3>
          One of the core components of any web-based application is the mechanism by which it controls and maintains the
          state for a user interacting with it. To avoid continuous authentication for each page of a website or service, web
          applications implement various mechanisms to store and validate credentials for a pre-determined timespan. These
          mechanisms are known as Session Management.
          <br/>
          In this test, the tester wants to check that cookies and other session tokens are created in a secure and unpredictable
          way. An attacker who is able to predict and forge a weak cookie can easily hijack the sessions of legitimate users.
          <br/>
          Cookies are used to implement session management and are described in detail in RFC 2965. In a nutshell, when a
          user accesses an application which needs to keep track of the actions and identity of that user across multiple requests,
          a cookie (or cookies) is generated by the server and sent to the client. The client will then send the cookie back to the
          server in all following connections until the cookie expires or is destroyed. The data stored in the cookie can provide to
          the server a large spectrum of information about who the user is, what actions he has performed so far, what his
          preferences are, etc. therefore providing a state to a stateless protocol like HTTP.
          <hr/>
        </div>

        <div className="col-md-12">
          <h3 className="helpTitle">Tips & How:</h3>
          <ul>
            <li>
              Gather session tokens, for the same user and for different users where possible
            </li>
            <li>
              Analyze and ensure that enough randomness exists to stop session forging attacks
            </li>
            <li>
              Modify cookies that are not signed and contain information that can be manipulated
            </li>
            <li>
              Are all <span className="codeText">Set-Cookie</span> directives tagged as <span className="codeText">Secure</span> ?
            </li>
            <li>
              Do any Cookie operations take place over unencrypted transport?
            </li>
            <li>
              Can the Cookie be forced over unencrypted transport? If so, how does the application maintain security?
            </li>
            <li>
              Are any Cookies persistent?
            </li>
            <li>
              What <span className="codeText">Expires</span> times are used on persistent cookies, and are they reasonable?
            </li>
            <li>
              Are cookies that are expected to be transient configured as such?
            </li>
            <li>
              What HTTP/1.1 and/or HTTP/1.0 <span className="codeText">Cache-Control</span> settings are used to protect Cookies?
            </li>
            <li>
            </li>
          </ul>
          <hr/>
        </div>

        <div className="col-md-12">
          <h3 className="helpTitle">Tools:</h3>
          Web Browsers, Burp Sequencer, OWASP ZAP, YEHG's JHijack
          <hr/>
        </div>
      </div>
    </div>
  )
}
